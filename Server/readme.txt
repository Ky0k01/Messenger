При запуске:
1. создается экземпляр логгера
2. создается эзкемпляр посредника, в который передается указатель на логгер.
3. посредник инициализирует:
    1) WebSocketFacade
    2) DatabaseFacade
    3) инициализирует соединения между объектами выше.

WebSocketFacade создает в себе:
1. машину состояний
2. SessionManager - хранение пользователей и сессий
3. StartupManager - запуск работы сервера
4. Invoke и receive command (внутри будут фабрики команд)
5. SocketManager - работа с сокетами (слоты выполнения операций)

DatabaseFacade создает в себе:
1. DatabaseStartupManager - запуск базы данных (или создание)
2. QueryManager - создание запросов
3. MigratioonManager - организация миграций БД (в планах)

Работа машины состояний:
1. START_STATE
    инициализация сокет сервера, переход в проверку обновлений, переъод в конфигурацию
2. CHECK_UPDATE_STATE   (не реализовано)
3. UPDATING_STATE       (не реализовано)
4. CONFIGURATION_STATE
    запуск сервера, инициализация соединений с новыми сокетами. запуск БД
5. READY_STATE
    чтение команд в терминал, вывод информации по сокетами и сессиям.

Алгоритм работы при подключении сокета:
1. При получении нового сокета добавить его в список SessionManager::anonymousSocket
2. Соединить сокет со слотами на прием сообщений и Ping Pong.
3. Установка счетчика на попытку входа

Алгоритм работы на регистрацию:
1. Получение данных SocketManager, конвертация в JsonDoc
2. Проверка в ReceiveCommandManager.
3. Отправка запроса в БД (QueryManager)
4. По итогам запроса подготовка ответа в InvokeManager.
5. Отправка ответа

Алгоритм работы на логин:
п. 1-4 аналогичны алгоритму регистрации
5. генерация сессионного токена (опционально токена на автологин)
6. отправка ответа

Алгоритм работы на получение обмен сообщениями:
1. Получение данных SocketManager, конвертация в JsonDoc
2. Проверка в ReceiveCommandManager.
3. Запрос в БД (сохранение истории сообщений)
4. подготовка отправки сообщение в нужный сокет (по id)
5. отправка
